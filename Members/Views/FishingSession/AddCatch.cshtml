@model Members.Models.Catch

@{
    ViewData["Title"] = "Log a Catch";
    var session = (Members.Models.FishingSession)ViewBag.Session;
    var fishSpecies = (List<Members.Models.FishSpecies>)ViewBag.FishSpecies;
}

<div class="container my-4">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            
            <!-- Session Info Header -->
            <div class="card mb-4 border-primary">
                <div class="card-header bg-primary text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="mb-0">
                                <i class="bi bi-journal-check"></i> Active Session:
                            </h5>
                            <small>@session.SessionDate.ToString("MMMM dd, yyyy 'at' h:mm tt")</small>
                        </div>
                        <span class="badge bg-light text-dark">
                            @session.WaterType Water
                        </span>
                    </div>
                </div>
            </div>

            <!-- Current Location & Weather -->
            <div class="card mb-4 border-info">
                <div class="card-header bg-info text-white">
                    <h6 class="mb-0">
                        <i class="bi bi-geo-alt"></i> Current Location & Weather
                    </h6>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label fw-bold">Location</label>
                            <div class="d-flex align-items-center">
                                <span id="currentLocation">Getting location...</span>
                                <button type="button" id="mapButton" class="btn btn-sm btn-primary ms-2" style="display: none;">
                                    <i class="bi bi-map"></i> View on Map
                                </button>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fw-bold">Current Weather</label>
                            <div id="currentWeather">
                                <span class="text-muted">Loading weather...</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row mb-3" id="moonPhaseRow" style="display: none;">
                        <div class="col-md-6">
                            <label class="form-label fw-bold">
                                <span id="currentMoonIcon">🌙</span> Moon Phase
                            </label>
                            <div id="currentMoonPhase">
                                <span class="text-muted">Loading moon phase...</span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fw-bold">
                                <i class="bi bi-stars"></i> Fishing Quality
                            </label>
                            <div id="currentFishingQuality">
                                <span class="text-muted">Loading...</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3" id="moonTipRow" style="display: none;">
                        <div class="alert alert-info">
                            <i class="bi bi-lightbulb"></i> <strong>Fishing Tip:</strong>
                            <span id="currentMoonTip">Loading fishing tip...</span>
                        </div>
                    </div>
                    
                    <div class="row mb-3" id="tideRow" style="display: none;">
                        <div class="col-md-6">
                            <label class="form-label fw-bold">
                                <i class="bi bi-water"></i> Tide State
                            </label>
                            <div id="currentTideState">
                                <span class="text-muted">Loading tide info...</span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fw-bold">
                                <i class="bi bi-arrows-expand-vertical"></i> Tide Height
                            </label>
                            <div id="currentTideHeight">
                                <span class="text-muted">Loading...</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3" id="tideTipRow" style="display: none;">
                        <div class="alert alert-success">
                            <i class="bi bi-water"></i> <strong>Tide Tip:</strong>
                            <span id="currentTideTip">Loading tide fishing tip...</span>
                        </div>
                    </div>
                    
                    <!-- Status Message -->
                    <div class="alert alert-info" id="locationWeatherStatus">
                        <i class="bi bi-geo-alt"></i> Getting your current location, weather, moon phase, and tide data...
                    </div>
                </div>
            </div>

            <!-- Add Catch Form -->
            <div class="card">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0"><i class="bi bi-plus-circle"></i> Log New Catch</h5>
                </div>
                <div class="card-body">
                    <form asp-action="AddCatch" method="post">
                        <input type="hidden" asp-for="SessionId" />
                        <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                        <!-- Fish Species Selection -->
                        <div class="mb-3">
                            <label asp-for="FishSpeciesId" class="form-label">
                                <i class="bi bi-collection"></i> Fish Species *
                            </label>
                            
                            <!-- Species Filter Input -->
                            <div class="input-group mb-2">
                                <span class="input-group-text"><i class="bi bi-search"></i></span>
                                <input type="text" id="speciesFilter" class="form-control" 
                                       placeholder="Type to filter species (e.g., 'bass', 'trout', 'catfish')..." 
                                       autocomplete="off">
                                <button type="button" id="clearSpeciesFilter" class="btn btn-outline-secondary" style="display: none;">
                                    <i class="bi bi-x"></i>
                                </button>
                            </div>
                            
                            <select asp-for="FishSpeciesId" class="form-select" required id="fishSpeciesSelect">
                                <option value="">Select the fish species you caught...</option>
                                @foreach (var fish in fishSpecies)
                                {
                                    <option value="@fish.Id" 
                                            data-min-size="@fish.MinSize" 
                                            data-max-size="@fish.MaxSize"
                                            data-regulations="@fish.RegulationNotes"
                                            data-search-text="@fish.CommonName @fish.ScientificName">
                                        @fish.CommonName
                                        @if (!string.IsNullOrEmpty(fish.ScientificName))
                                        {
                                            <text> (@fish.ScientificName)</text>
                                        }
                                    </option>
                                }
                            </select>
                            <span asp-validation-for="FishSpeciesId" class="text-danger"></span>
                            
                            <!-- Filter Status -->
                            <div id="filterStatus" class="form-text text-muted mt-1" style="display: none;">
                                <i class="bi bi-info-circle"></i> <span id="filteredCount">0</span> species match your search
                            </div>
                            
                            <!-- Fish Info Display -->
                            <div id="fishInfo" class="mt-2 d-none">
                                <div class="alert alert-info mb-0">
                                    <div id="sizeRange" class="mb-1"></div>
                                    <div id="regulations" class="small"></div>
                                </div>
                            </div>
                        </div>

                        <!-- Catch Details -->
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label asp-for="Size" class="form-label">
                                    <i class="bi bi-rulers"></i> Length (inches) *
                                </label>
                                <input asp-for="Size" type="number" step="any" min="0" max="999" 
                                       class="form-control" placeholder="e.g., 12.5" required />
                                <span asp-validation-for="Size" class="text-danger"></span>
                            </div>
                            <div class="col-md-6">
                                <label asp-for="Weight" class="form-label">
                                    <i class="bi bi-speedometer2"></i> Weight (pounds, optional)
                                </label>
                                <input asp-for="Weight" type="number" step="any" min="0" max="999" 
                                       class="form-control" placeholder="e.g., 2.5" />
                                <span asp-validation-for="Weight" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Catch Time -->
                        <div class="mb-4">
                            <label asp-for="CatchTime" class="form-label">
                                <i class="bi bi-clock"></i> Catch Time (optional)
                            </label>
                            <input asp-for="CatchTime" type="datetime-local" class="form-control" />
                            <div class="form-text">Leave blank to use current time</div>
                            <span asp-validation-for="CatchTime" class="text-danger"></span>
                        </div>

                        <!-- Fishing Equipment -->
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <label asp-for="RigUsed" class="form-label">
                                    <i class="bi bi-diagram-3"></i> Rig Used (optional)
                                </label>
                                <input asp-for="RigUsed" class="form-control" 
                                       placeholder="e.g., Carolina rig, Drop shot, Texas rig..." 
                                       maxlength="200" />
                                <span asp-validation-for="RigUsed" class="text-danger"></span>
                            </div>
                            <div class="col-md-6">
                                <label asp-for="LureUsed" class="form-label">
                                    <i class="bi bi-record-circle"></i> Lure/Bait Used (optional)
                                </label>
                                <input asp-for="LureUsed" class="form-control" 
                                       placeholder="e.g., Green plastic worm, Spinnerbait, Live minnow..." 
                                       maxlength="200" />
                                <span asp-validation-for="LureUsed" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="d-grid gap-2 d-md-flex justify-content-md-between">
                            <div>
                                <a asp-action="Details" asp-route-id="@session.Id" class="btn btn-secondary">
                                    <i class="bi bi-eye"></i> View Session
                                </a>
                                <a asp-action="EndSession" asp-route-id="@session.Id" class="btn btn-warning">
                                    <i class="bi bi-stop-circle"></i> End Session
                                </a>
                            </div>
                            <div>
                                <button type="submit" class="btn btn-success">
                                    <i class="bi bi-check-circle"></i> Log Catch
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Quick Tips -->
            <div class="card mt-4">
                <div class="card-header bg-light">
                    <h6 class="mb-0"><i class="bi bi-lightbulb"></i> Catch Logging Tips</h6>
                </div>
                <div class="card-body">
                    <div class="row gy-3">
                        <div class="col-md-6">
                            <ul class="list-unstyled mb-md-0">
                                <li class="mb-2">
                                    <i class="bi bi-check-circle text-success me-2"></i>
                                    <strong>Measure carefully:</strong> Use consistent measurement points
                                </li>
                                <li class="mb-2">
                                    <i class="bi bi-check-circle text-success me-2"></i>
                                    <strong>Follow regulations:</strong> Check size and bag limits
                                </li>
                            </ul>
                        </div>
                        <div class="col-md-6 ">
                            <ul class="list-unstyled mb-0">
                                <li class="mb-2">
                                    <i class="bi bi-check-circle text-success me-2"></i>
                                    <strong>Quick logging:</strong> Log each catch immediately
                                </li>
                                <li class="mb-2">
                                    <i class="bi bi-check-circle text-success me-2"></i>
                                    <strong>Photo composition:</strong> Coming soon in Fish-Smart!
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Under Size Fish Modal -->
<div class="modal fade" id="underSizeModal" tabindex="-1" aria-labelledby="underSizeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title" id="underSizeModalLabel">
                    <i class="bi bi-exclamation-triangle"></i> Fish Size Alert
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="mb-3">
                    This fish appears to be under the minimum legal size (<strong><span id="underSizeMinSize"></span>"</strong>).
                </p>
                <p class="mb-0">
                    <i class="bi bi-info-circle text-info"></i> Are you planning to release it?
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" id="underSizeCancelBtn">Cancel</button>
                <button type="button" class="btn btn-success" id="underSizeOkBtn">
                    <i class="bi bi-check-circle"></i> Yes, Releasing
                </button>
            </div>
        </div>
    </div>
</div>

@if (TempData["Success"] != null)
{
    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050">
        <div class="toast show" role="alert" id="successToast" data-bs-autohide="true" data-bs-delay="4000">
            <div class="toast-header bg-success text-white">
                <i class="bi bi-check-circle me-2"></i>
                <strong class="me-auto">Success</strong>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
            </div>
            <div class="toast-body" style="background-color: var(--bs-success-bg-subtle, #d1e7dd); color: var(--bs-success-text-emphasis, #0a3622);">
                @TempData["Success"]
            </div>
        </div>
    </div>
}

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Toast auto-dismiss handled by global auto-dismiss-alerts.js
            
            const fishSelect = document.getElementById('fishSpeciesSelect');
            const fishInfo = document.getElementById('fishInfo');
            const sizeRange = document.getElementById('sizeRange');
            const regulations = document.getElementById('regulations');
            const sizeInput = document.getElementById('Size');
            
            // Species Filter Elements
            const speciesFilter = document.getElementById('speciesFilter');
            const clearSpeciesFilter = document.getElementById('clearSpeciesFilter');
            const filterStatus = document.getElementById('filterStatus');
            const filteredCount = document.getElementById('filteredCount');
            
            // Location and Weather Elements
            const currentLocation = document.getElementById('currentLocation');
            const currentWeather = document.getElementById('currentWeather');
            const mapButton = document.getElementById('mapButton');
            const locationWeatherStatus = document.getElementById('locationWeatherStatus');
            let currentLat = null;
            let currentLng = null;
            
            // Auto-set catch time to current time
            const catchTimeInput = document.getElementById('CatchTime');
            if (catchTimeInput && !catchTimeInput.value) {
                const now = new Date();
                now.setMinutes(now.getMinutes() - now.getTimezoneOffset());
                catchTimeInput.value = now.toISOString().slice(0, 16);
            }
            
            // Species Filter Functionality
            let allOptions = Array.from(fishSelect.options).slice(1); // Skip the first placeholder option
            
            function filterSpecies() {
                const filterText = speciesFilter.value.toLowerCase().trim();
                
                if (filterText === '') {
                    // Show all options
                    showAllOptions();
                    clearSpeciesFilter.style.display = 'none';
                    filterStatus.style.display = 'none';
                    return;
                }
                
                // Clear current options (except placeholder)
                while (fishSelect.options.length > 1) {
                    fishSelect.removeChild(fishSelect.options[1]);
                }
                
                // Filter and add matching options
                let matchCount = 0;
                allOptions.forEach(function(option) {
                    const searchText = option.getAttribute('data-search-text') || option.textContent;
                    if (searchText.toLowerCase().includes(filterText)) {
                        fishSelect.appendChild(option.cloneNode(true));
                        matchCount++;
                    }
                });
                
                // Update UI
                clearSpeciesFilter.style.display = 'inline-block';
                filterStatus.style.display = 'block';
                filteredCount.textContent = matchCount;
                
                // Auto-select if only one match
                if (matchCount === 1) {
                    fishSelect.selectedIndex = 1;
                    fishSelect.dispatchEvent(new Event('change'));
                }
            }
            
            function showAllOptions() {
                // Clear current options (except placeholder)
                while (fishSelect.options.length > 1) {
                    fishSelect.removeChild(fishSelect.options[1]);
                }
                
                // Add all options back
                allOptions.forEach(function(option) {
                    fishSelect.appendChild(option.cloneNode(true));
                });
            }
            
            function clearFilter() {
                speciesFilter.value = '';
                showAllOptions();
                clearSpeciesFilter.style.display = 'none';
                filterStatus.style.display = 'none';
                speciesFilter.focus();
            }
            
            // Event listeners for species filter
            speciesFilter.addEventListener('input', function() {
                filterSpecies();
            });
            
            clearSpeciesFilter.addEventListener('click', function() {
                clearFilter();
            });
            
            // Clear filter when species is manually selected
            fishSelect.addEventListener('change', function() {
                if (this.value && speciesFilter.value) {
                    // Don't clear the filter automatically, let user decide
                }
            });
            
            // Get current location and weather for catch logging with maximum accuracy
            if (navigator.geolocation) {
                console.log('DEBUG: Starting geolocation request');
                
                const geoOptions = {
                    enableHighAccuracy: true,    // Request highest accuracy GPS
                    timeout: 15000,              // Reduce to 15 seconds for GPS fix (was 30 seconds)
                    maximumAge: 60000            // Allow 1-minute cached location (was 0)
                };
                
                // Add a backup timeout in case geolocation hangs without calling error callback
                const geoTimeoutId = setTimeout(() => {
                    console.log('DEBUG: Geolocation backup timeout triggered after 20 seconds');
                    currentLocation.textContent = 'Location timeout';
                    currentWeather.innerHTML = '<span class="text-muted">Weather unavailable</span>';
                    locationWeatherStatus.innerHTML = '<i class="bi bi-exclamation-triangle text-warning"></i> Location request timed out - GPS may be unavailable';
                    locationWeatherStatus.className = 'alert alert-warning';
                }, 20000); // 20 second backup timeout
                
                navigator.geolocation.getCurrentPosition(
                    async function(position) {
                        clearTimeout(geoTimeoutId); // Clear backup timeout
                        
                        // Capture MAXIMUM GPS precision (no rounding for storage)
                        currentLat = position.coords.latitude;
                        currentLng = position.coords.longitude;
                        const accuracy = position.coords.accuracy;
                        
                        console.log('DEBUG: High-accuracy catch location: ' + currentLat + ', ' + currentLng + ' (±' + accuracy + 'm)');
                        
                        // Update location display with readable precision
                        currentLocation.textContent = currentLat.toFixed(6) + ', ' + currentLng.toFixed(6) + ' (±' + (accuracy ? Math.round(accuracy) : '?') + 'm)';
                        
                        // Show map button
                        mapButton.style.display = 'inline-block';
                        mapButton.addEventListener('click', function() {
                            var mapUrl = 'https://www.google.com/maps/' + '@@' + currentLat + ',' + currentLng + ',50m/data=!3m1!1e3';
                            window.open(mapUrl, '_blank');
                        });
                        
                        locationWeatherStatus.innerHTML = '<i class="bi bi-check-circle text-success"></i> High-accuracy location found (±' + (accuracy ? Math.round(accuracy) : '?') + 'm)! Getting current weather, moon phase, and tide data...';
                        locationWeatherStatus.className = 'alert alert-success';
                        
                        // Fetch current weather, moon phase, and tide data
                        await fetchCurrentWeather(currentLat, currentLng);
                        await fetchCurrentMoonPhase(currentLat, currentLng);
                        await fetchCurrentTideData(currentLat, currentLng);
                    },
                    function(error) {
                        clearTimeout(geoTimeoutId); // Clear backup timeout
                        
                        console.error('DEBUG: High-accuracy geolocation error: ' + error.message + ' (code: ' + error.code + ')');
                        
                        // Try fallback with lower accuracy if high accuracy fails
                        if (error.code === 2 || error.code === 3) { // Position unavailable or timeout
                            console.log('DEBUG: Trying fallback geolocation with lower accuracy');
                            
                            locationWeatherStatus.innerHTML = '<i class="bi bi-exclamation-triangle text-warning"></i> High-accuracy GPS failed, trying standard GPS...';
                            locationWeatherStatus.className = 'alert alert-warning';
                            
                            const fallbackOptions = {
                                enableHighAccuracy: false,  // Use network/wifi location
                                timeout: 10000,             // 10 second timeout for fallback
                                maximumAge: 300000          // Accept 5-minute cached location
                            };
                            
                            navigator.geolocation.getCurrentPosition(
                                async function(position) {
                                    currentLat = position.coords.latitude;
                                    currentLng = position.coords.longitude;
                                    const accuracy = position.coords.accuracy;
                                    
                                    console.log('DEBUG: Fallback location found: ' + currentLat + ', ' + currentLng + ' (±' + accuracy + 'm)');
                                    
                                    currentLocation.textContent = currentLat.toFixed(4) + ', ' + currentLng.toFixed(4) + ' (±' + (accuracy ? Math.round(accuracy) : '?') + 'm, network-based)';
                                    
                                    mapButton.style.display = 'inline-block';
                                    mapButton.addEventListener('click', function() {
                                        var mapUrl = 'https://www.google.com/maps/' + '@@' + currentLat + ',' + currentLng + ',50m/data=!3m1!1e3';
                                        window.open(mapUrl, '_blank');
                                    });
                                    
                                    locationWeatherStatus.innerHTML = '<i class="bi bi-check-circle text-success"></i> Network-based location found! Getting current weather and moon phase...';
                                    locationWeatherStatus.className = 'alert alert-info';
                                    
                                    await fetchCurrentWeather(currentLat, currentLng);
                                    await fetchCurrentMoonPhase(currentLat, currentLng);
                                },
                                function(fallbackError) {
                                    console.error('DEBUG: Fallback geolocation also failed: ' + fallbackError.message + ' (code: ' + fallbackError.code + ')');
                                    
                                    let errorMessage = 'Location access denied';
                                    if (fallbackError.code === 1) {
                                        errorMessage = 'Location access denied - please allow location access in browser settings';
                                    } else if (fallbackError.code === 2) {
                                        errorMessage = 'Location completely unavailable - no GPS or network location';
                                    } else if (fallbackError.code === 3) {
                                        errorMessage = 'All location methods timed out';
                                    }
                                    currentLocation.textContent = 'Location unavailable';
                                    currentWeather.innerHTML = '<span class="text-muted">Weather unavailable</span>';
                                    locationWeatherStatus.innerHTML = '<i class="bi bi-exclamation-triangle"></i> ' + errorMessage;
                                    locationWeatherStatus.className = 'alert alert-danger';
                                },
                                fallbackOptions
                            );
                        } else {
                            // For permission denied, don't try fallback
                            let errorMessage = 'Location access denied - please allow location access for weather data';
                            currentLocation.textContent = 'Location unavailable';
                            currentWeather.innerHTML = '<span class="text-muted">Weather unavailable</span>';
                            locationWeatherStatus.innerHTML = '<i class="bi bi-exclamation-triangle"></i> ' + errorMessage;
                            locationWeatherStatus.className = 'alert alert-warning';
                        }
                    },
                    geoOptions  // Apply high accuracy settings
                );
            } else {
                console.log('DEBUG: Geolocation not supported by browser');
                currentLocation.textContent = 'Geolocation not supported';
                currentWeather.innerHTML = '<span class="text-muted">Weather unavailable</span>';
                locationWeatherStatus.innerHTML = '<i class="bi bi-exclamation-triangle"></i> Geolocation not supported';
                locationWeatherStatus.className = 'alert alert-warning';
            }
            
            // Function to fetch current weather for catch logging
            async function fetchCurrentWeather(lat, lng) {
                try {
                    console.log('DEBUG: Starting weather fetch for coordinates:', lat, lng);
                    
                    // Add timeout to the fetch request to prevent hanging
                    const controller = new AbortController();
                    const timeoutId = setTimeout(() => {
                        console.log('DEBUG: Weather fetch timeout after 10 seconds');
                        controller.abort();
                    }, 10000); // 10 second timeout
                    
                    const response = await fetch(`/FishingSession/GetWeather?lat=${lat}&lng=${lng}`, {
                        signal: controller.signal
                    });
                    
                    clearTimeout(timeoutId);
                    console.log('DEBUG: Weather fetch response received, status:', response.status);
                    
                    if (response.ok) {
                        const weatherData = await response.json();
                        console.log('DEBUG: Weather data parsed:', weatherData);
                        
                        if (weatherData.isSuccessful) {
                            let weatherDisplay = '<div class="d-flex flex-wrap gap-2 align-items-center">';
                            weatherDisplay += '<span>' + weatherData.weatherConditions + '</span>';
                            weatherDisplay += '<span class="badge bg-info">' + Math.round(weatherData.temperature) + '°F</span>';
                            if (weatherData.windDirection && weatherData.windSpeed) {
                                weatherDisplay += '<span class="badge bg-secondary">Wind: ' + weatherData.windDirection + ' ' + Math.round(weatherData.windSpeed) + ' mph</span>';
                            }
                            weatherDisplay += '</div>';
                            currentWeather.innerHTML = weatherDisplay;
                            
                            // Will be updated when moon phase completes
                            locationWeatherStatus.innerHTML = '<i class="bi bi-check-circle text-success"></i> Weather loaded! Getting moon phase...';
                        } else {
                            console.log('DEBUG: Weather service returned unsuccessful:', weatherData.errorMessage);
                            currentWeather.innerHTML = '<span class="text-muted">Weather data unavailable</span>';
                            locationWeatherStatus.innerHTML = '<i class="bi bi-check-circle text-success"></i> Location ready (Weather unavailable)';
                        }
                    } else {
                        console.log('DEBUG: Weather fetch response not ok:', response.status, response.statusText);
                        currentWeather.innerHTML = '<span class="text-muted">Weather service unavailable</span>';
                        locationWeatherStatus.innerHTML = '<i class="bi bi-check-circle text-success"></i> Location ready (Weather service unavailable)';
                    }
                } catch (error) {
                    console.error('DEBUG: Weather fetch error:', error);
                    
                    if (error.name === 'AbortError') {
                        console.log('DEBUG: Weather fetch was aborted due to timeout');
                        currentWeather.innerHTML = '<span class="text-muted">Weather fetch timeout</span>';
                        locationWeatherStatus.innerHTML = '<i class="bi bi-exclamation-triangle text-warning"></i> Location ready (Weather timed out)';
                    } else {
                        console.error('Error fetching weather:', error);
                        currentWeather.innerHTML = '<span class="text-muted">Weather fetch failed</span>';
                        locationWeatherStatus.innerHTML = '<i class="bi bi-check-circle text-success"></i> Location ready (Weather fetch failed)';
                    }
                }
            }
            
            // Function to fetch current moon phase for catch logging
            async function fetchCurrentMoonPhase(lat, lng) {
                try {
                    console.log('DEBUG: Starting moon phase fetch for coordinates:', lat, lng);
                    
                    const response = await fetch(`/FishingSession/GetMoonPhase?lat=${lat}&lng=${lng}`);
                    console.log('DEBUG: Moon phase fetch response received, status:', response.status);
                    
                    if (response.ok) {
                        const moonData = await response.json();
                        console.log('DEBUG: Moon phase data parsed:', moonData);
                        
                        if (moonData && moonData.phaseName && !moonData.error) {
                            // Show moon phase rows and populate data
                            document.getElementById('moonPhaseRow').style.display = 'block';
                            document.getElementById('moonTipRow').style.display = 'block';
                            
                            document.getElementById('currentMoonIcon').textContent = moonData.icon || '🌙';
                            
                            let moonDisplay = '<div class="d-flex flex-wrap gap-2 align-items-center">';
                            moonDisplay += '<span>' + moonData.phaseName + '</span>';
                            moonDisplay += '<span class="badge bg-secondary">' + Math.round(moonData.illuminationPercentage) + '% lit</span>';
                            moonDisplay += '</div>';
                            document.getElementById('currentMoonPhase').innerHTML = moonDisplay;
                            
                            let qualityDisplay = '<span class="badge bg-' + (moonData.fishingQuality === 'Excellent' ? 'success' : moonData.fishingQuality === 'Good' ? 'primary' : 'warning') + '">';
                            qualityDisplay += moonData.fishingQuality || 'Good';
                            qualityDisplay += '</span>';
                            document.getElementById('currentFishingQuality').innerHTML = qualityDisplay;
                            
                            document.getElementById('currentMoonTip').textContent = moonData.fishingTip || 'Good fishing conditions!';
                            
                            locationWeatherStatus.innerHTML = '<i class="bi bi-check-circle text-success"></i> Location, weather, and moon phase ready!';
                            
                            // Auto-hide status after 4 seconds
                            setTimeout(() => {
                                locationWeatherStatus.style.display = 'none';
                            }, 4000);
                        } else {
                            console.log('DEBUG: Moon phase service returned error or no data:', moonData.errorMessage);
                            document.getElementById('currentMoonPhase').innerHTML = '<span class="text-muted">Moon phase unavailable</span>';
                            document.getElementById('currentFishingQuality').innerHTML = '<span class="text-muted">N/A</span>';
                            locationWeatherStatus.innerHTML = '<i class="bi bi-check-circle text-success"></i> Location and weather ready (Moon phase unavailable)';
                        }
                    } else {
                        console.log('DEBUG: Moon phase fetch response not ok:', response.status, response.statusText);
                        document.getElementById('currentMoonPhase').innerHTML = '<span class="text-muted">Moon service unavailable</span>';
                        document.getElementById('currentFishingQuality').innerHTML = '<span class="text-muted">N/A</span>';
                        locationWeatherStatus.innerHTML = '<i class="bi bi-check-circle text-success"></i> Location and weather ready (Moon service unavailable)';
                    }
                } catch (error) {
                    console.error('DEBUG: Moon phase fetch error:', error);
                    document.getElementById('currentMoonPhase').innerHTML = '<span class="text-muted">Moon fetch failed</span>';
                    document.getElementById('currentFishingQuality').innerHTML = '<span class="text-muted">N/A</span>';
                    locationWeatherStatus.innerHTML = '<i class="bi bi-check-circle text-success"></i> Location and weather ready (Moon fetch failed)';
                }
            }
            
            // Function to fetch current tide data for catch logging
            async function fetchCurrentTideData(lat, lng) {
                try {
                    console.log('DEBUG: Starting tide fetch for coordinates:', lat, lng);
                    
                    const response = await fetch(`/FishingSession/GetTideInfo?lat=${lat}&lng=${lng}`);
                    console.log('DEBUG: Tide fetch response received, status:', response.status);
                    
                    if (response.ok) {
                        const tideData = await response.json();
                        console.log('DEBUG: Tide data parsed:', tideData);
                        
                        if (tideData && !tideData.error) {
                            // Show tide rows and populate data
                            document.getElementById('tideRow').style.display = 'block';
                            document.getElementById('tideTipRow').style.display = 'block';
                            
                            if (tideData.isCoastal) {
                                let tideDisplay = '<div class="d-flex flex-wrap gap-2 align-items-center">';
                                tideDisplay += '<span>' + tideData.tideState + '</span>';
                                tideDisplay += '<span class="badge bg-info">' + tideData.tideRange + '</span>';
                                tideDisplay += '</div>';
                                document.getElementById('currentTideState').innerHTML = tideDisplay;
                                
                                let heightDisplay = '<div class="d-flex flex-wrap gap-2 align-items-center">';
                                heightDisplay += '<span class="badge bg-primary">' + tideData.tideHeight + ' ft</span>';
                                if (tideData.timeToNextChange) {
                                    heightDisplay += '<small class="text-muted">Next change: ' + tideData.timeToNextChange + '</small>';
                                }
                                heightDisplay += '</div>';
                                document.getElementById('currentTideHeight').innerHTML = heightDisplay;
                                
                                document.getElementById('currentTideTip').textContent = tideData.fishingRecommendation || 'Great fishing conditions!';
                            } else {
                                document.getElementById('currentTideState').innerHTML = '<span class="badge bg-secondary">Inland Location</span>';
                                document.getElementById('currentTideHeight').innerHTML = '<span class="text-muted">N/A</span>';
                                document.getElementById('currentTideTip').textContent = 'Focus on weather and moon phase for inland fishing.';
                            }
                            
                            locationWeatherStatus.innerHTML = '<i class="bi bi-check-circle text-success"></i> Location, weather, moon phase, and tide data ready!';
                            
                            // Auto-hide status after 5 seconds
                            setTimeout(() => {
                                locationWeatherStatus.style.display = 'none';
                            }, 5000);
                        } else {
                            console.log('DEBUG: Tide service returned error:', tideData.errorMessage);
                            document.getElementById('currentTideState').innerHTML = '<span class="text-muted">Tide data unavailable</span>';
                            document.getElementById('currentTideHeight').innerHTML = '<span class="text-muted">N/A</span>';
                        }
                    } else {
                        console.log('DEBUG: Tide fetch response not ok:', response.status, response.statusText);
                        document.getElementById('currentTideState').innerHTML = '<span class="text-muted">Tide service unavailable</span>';
                        document.getElementById('currentTideHeight').innerHTML = '<span class="text-muted">N/A</span>';
                    }
                } catch (error) {
                    console.error('DEBUG: Tide fetch error:', error);
                    document.getElementById('currentTideState').innerHTML = '<span class="text-muted">Tide fetch failed</span>';
                    document.getElementById('currentTideHeight').innerHTML = '<span class="text-muted">N/A</span>';
                }
            }
            
            // Show fish information when species is selected
            fishSelect.addEventListener('change', function() {
                const selectedOption = this.options[this.selectedIndex];
                
                if (selectedOption.value) {
                    const minSize = selectedOption.dataset.minSize;
                    const maxSize = selectedOption.dataset.maxSize;
                    const regs = selectedOption.dataset.regulations;
                    
                    let sizeText = '';
                    if (minSize && maxSize) {
                        sizeText = `Typical size range: ${minSize}" - ${maxSize}"`;
                    } else if (minSize) {
                        sizeText = `Minimum legal size: ${minSize}"`;
                    } else if (maxSize) {
                        sizeText = `Maximum typical size: ${maxSize}"`;
                    }
                    
                    sizeRange.textContent = sizeText;
                    regulations.textContent = regs || 'Check local regulations for specific rules.';
                    
                    fishInfo.classList.remove('d-none');
                } else {
                    fishInfo.classList.add('d-none');
                }
            });
            
            // Validate size against regulations
            sizeInput.addEventListener('blur', function() {
                const selectedOption = fishSelect.options[fishSelect.selectedIndex];
                if (selectedOption.value) {
                    const minSize = parseFloat(selectedOption.dataset.minSize);
                    const enteredSize = parseFloat(this.value);
                    
                    if (minSize && enteredSize < minSize) {
                        showUnderSizeModal(minSize, this);
                    }
                }
            });
            
            // Function to show under-size fish modal
            function showUnderSizeModal(minSize, inputElement) {
                document.getElementById('underSizeMinSize').textContent = minSize;
                const modal = new bootstrap.Modal(document.getElementById('underSizeModal'));
                
                // Handle OK button click
                document.getElementById('underSizeOkBtn').onclick = function() {
                    modal.hide();
                    // User confirmed they're releasing it - do nothing
                };
                
                // Handle Cancel button click  
                document.getElementById('underSizeCancelBtn').onclick = function() {
                    modal.hide();
                    inputElement.focus();
                };
                
                modal.show();
            }
        });
    </script>
    
    <style>
        .toast {
            animation: slideIn 0.3s ease-out;
        }
        
        @@keyframes slideIn {
            from { transform: translateX(100%); }
            to { transform: translateX(0); }
        }
    </style>
}