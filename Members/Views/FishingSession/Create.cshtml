@model Members.Models.FishingSession

@{
    ViewData["Title"] = "Start New Fishing Session";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-lg-8">

            <!-- Header -->
            <div class="text-center mb-4">
                <h2>🎣 Start New Fishing Session</h2>
                <p class="text-white">Begin tracking your fishing adventure</p>
            </div>

            <!-- Create Session Form -->
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="bi bi-journal-plus"></i> Session Details</h5>
                </div>
                <div class="card-body">
                    <form asp-action="Create" method="post">
                        <input type="hidden" asp-for="UserId" />
                        <div asp-validation-summary="All" class="text-danger mb-3" id="validationSummary"></div>

                        <!-- Basic Information -->
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label asp-for="SessionDate" class="form-label">
                                    <i class="bi bi-calendar3"></i> Date & Time
                                </label>
                                <input asp-for="SessionDate" type="datetime-local" class="form-control" />
                                <span asp-validation-for="SessionDate" class="text-danger"></span>
                            </div>
                            <div class="col-md-6">
                                <label asp-for="WaterType" class="form-label">
                                    <i class="bi bi-droplet"></i> Water Type
                                </label>
                                <select asp-for="WaterType" class="form-select">
                                    <option value="Fresh">Freshwater</option>
                                    <option value="Salt">Saltwater</option>
                                </select>
                                <span asp-validation-for="WaterType" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Location -->
                        <div class="mb-3">
                            <label asp-for="LocationName" class="form-label">
                                <i class="bi bi-geo-alt"></i> Location (Album Name)
                            </label>
                            <input asp-for="LocationName" class="form-control"
                                   placeholder="e.g., Lake Smith, Jones Pier, etc. (This will be your album name)" />
                            <span asp-validation-for="LocationName" class="text-danger"></span>
                            <div class="form-text">
                                <i class="bi bi-info-circle text-info"></i> 
                                This location name will be used as your fishing album name
                            </div>
                        </div>

                        <!-- GPS Coordinates and Weather -->
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label asp-for="Latitude" class="form-label">
                                    <i class="bi bi-compass"></i> Latitude
                                </label>
                                <input asp-for="Latitude" type="number" step="any" class="form-control"
                                       placeholder="Getting location..." readonly title="Full GPS precision will be captured" />
                                <span asp-validation-for="Latitude" class="text-danger"></span>
                                <small class="text-secondary">Full GPS precision captured</small>
                            </div>
                            <div class="col-md-6">
                                <label asp-for="Longitude" class="form-label">
                                    <i class="bi bi-compass"></i> Longitude
                                </label>
                                <input asp-for="Longitude" type="number" step="any" class="form-control"
                                       placeholder="Getting location..." readonly title="Full GPS precision will be captured" />
                                <small class="text-secondary">Full GPS precision captured</small>
                                <span asp-validation-for="Longitude" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Environmental Conditions (Auto-populated) -->
                        <div class="mb-3" id="environmentalSection" style="display: none;">
                            <label class="form-label fw-bold">
                                <i class="bi bi-globe2"></i> Current Environmental Conditions
                            </label>
                            <div class="d-flex flex-wrap gap-1 align-items-center mt-2 p-3 bg-light rounded" id="environmentalBadges">
                                <!-- Weather, moon, and tide badges will be populated here -->
                            </div>
                        </div>

                        <!-- Combined Fishing Tips -->
                        <div class="mb-3" id="fishingTipsSection" style="display: none;">
                            <div class="alert alert-info">
                                <i class="bi bi-lightbulb"></i> <strong>Fishing Recommendations:</strong>
                                <div id="combinedFishingTips" class="mt-2">
                                    <!-- Combined tips will be populated here -->
                                </div>
                            </div>
                        </div>

                        <!-- Location Status -->
                        <div class="mb-3">
                            <div class="alert alert-info" id="locationStatus">
                                <i class="bi bi-geo-alt"></i> Getting your location and weather data...
                            </div>
                        </div>

                        <!-- Equipment Selection -->
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label asp-for="RodReelSetupId" class="form-label">
                                    <i class="bi bi-tools"></i> Rod & Reel Setup (Optional)
                                </label>
                                <select asp-for="RodReelSetupId" class="form-select">
                                    <option value="">Select equipment...</option>
                                    @if (ViewBag.Equipment != null)
                                    {
                                        @foreach (var equipment in (List<Members.Models.FishingEquipment>)ViewBag.Equipment)
                                        {
                                            <option value="@equipment.Id">
                                                @equipment.Name - @equipment.Type
                                                @if (equipment.IsPremium)
                                                {
                                                    <text> (Premium)</text>
                                                }
                                            </option>
                                        }
                                    }
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label asp-for="PrimaryBaitLureId" class="form-label">
                                    <i class="bi bi-bounding-box"></i> Primary Bait/Lure (Optional)
                                </label>
                                <select asp-for="PrimaryBaitLureId" class="form-select">
                                    <option value="">Select bait/lure...</option>
                                    @if (ViewBag.BaitsLures != null)
                                    {
                                        @foreach (var baitLure in (List<Members.Models.BaitsLures>)ViewBag.BaitsLures)
                                        {
                                            <option value="@baitLure.Id">
                                                @baitLure.Name - @baitLure.Type
                                                @if (baitLure.IsPremium)
                                                {
                                                    <text> (Premium)</text>
                                                }
                                            </option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>

                        <!-- Session Notes -->
                        <div class="mb-4">
                            <label asp-for="Notes" class="form-label">
                                <i class="bi bi-chat-square-text"></i> Session Notes (Optional)
                            </label>
                            <textarea asp-for="Notes" class="form-control" rows="3"
                                      placeholder="Weather conditions, expectations, strategy, etc."></textarea>
                            <span asp-validation-for="Notes" class="text-danger"></span>
                        </div>

                        <!-- Action Buttons -->
                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <a asp-action="Index" class="btn btn-secondary me-2">
                                <i class="bi bi-arrow-left"></i> Cancel
                            </a>
                            <button type="submit" class="btn btn-primary" id="startSessionBtn">
                                <i class="bi bi-play-circle"></i> Start Session
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Tips Card -->
            <div class="card mt-4">
                <div class="card-header bg-info text-white">
                    <h6 class="mb-0"><i class="bi bi-lightbulb"></i> Tips for Better Session Tracking</h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <ul class="list-unstyled mb-0">
                                <li class="mb-2">
                                    <i class="bi bi-check-circle text-success me-2"></i>
                                    <strong>Location:</strong> Be specific (e.g., "North end of Lake Smith")
                                </li>
                                <li class="mb-2">
                                    <i class="bi bi-check-circle text-success me-2"></i>
                                    <strong>GPS:</strong> Use your phone's coordinates for precision
                                </li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <ul class="list-unstyled mb-0">
                                <li class="mb-2">
                                    <i class="bi bi-check-circle text-success me-2"></i>
                                    <strong>Notes:</strong> Record weather, water conditions, strategy
                                </li>
                                <li class="mb-2">
                                    <i class="bi bi-check-circle text-success me-2"></i>
                                    <strong>Equipment:</strong> Track what works for future reference
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        // Automatically get current location and weather on page load
        document.addEventListener('DOMContentLoaded', function() {
            const latInput = document.getElementById('Latitude');
            const lngInput = document.getElementById('Longitude');
            const locationStatus = document.getElementById('locationStatus');
            const weatherSection = document.getElementById('weatherSection');

            // Auto-get location on page load with maximum accuracy settings
            if (navigator.geolocation) {
                console.log('DEBUG: Geolocation is supported, requesting highest accuracy location...');
                
                const geoOptions = {
                    enableHighAccuracy: true,    // Request highest accuracy GPS
                    timeout: 30000,              // Allow 30 seconds for GPS fix
                    maximumAge: 0                // Don't use cached location
                };
                
                navigator.geolocation.getCurrentPosition(
                    async function(position) {
                        console.log('DEBUG: Location obtained successfully');
                        // Capture MAXIMUM precision from GPS (no rounding)
                        const lat = position.coords.latitude;
                        const lng = position.coords.longitude;
                        const accuracy = position.coords.accuracy;
                        const altitude = position.coords.altitude;
                        const altitudeAccuracy = position.coords.altitudeAccuracy;
                        
                        console.log(`DEBUG: Maximum precision coordinates: ${lat}, ${lng}`);
                        console.log(`DEBUG: GPS accuracy: ${accuracy}m, altitude: ${altitude}m (±${altitudeAccuracy}m)`);
                        
                        // Update location fields
                        latInput.value = lat;
                        lngInput.value = lng;
                        latInput.removeAttribute('readonly');
                        lngInput.removeAttribute('readonly');
                        
                        locationStatus.innerHTML = `<i class="bi bi-check-circle text-success"></i> High-accuracy location found (±${accuracy ? Math.round(accuracy) : '?'}m)! Getting weather, moon phase, and tide data...`;
                        locationStatus.className = 'alert alert-success';
                        
                        console.log('DEBUG: About to call fetchWeatherData...');
                        // Fetch weather, moon phase, and tide data
                        await fetchWeatherData(lat, lng);
                        await fetchMoonPhaseData(lat, lng);
                        await fetchTideData(lat, lng);
                    },
                    function(error) {
                        console.log(`DEBUG: Geolocation error: ${error.message} (code: ${error.code})`);
                        
                        let errorMessage = 'Location access denied';
                        if (error.code === 1) {
                            errorMessage = 'Location access denied - please allow GPS access for highest accuracy';
                        } else if (error.code === 2) {
                            errorMessage = 'Location unavailable - GPS signal weak';
                        } else if (error.code === 3) {
                            errorMessage = 'Location timeout - GPS taking too long';
                        }
                        
                        locationStatus.innerHTML = `<i class="bi bi-exclamation-triangle"></i> ${errorMessage}`;
                        locationStatus.className = 'alert alert-warning';
                        
                        // Make fields editable for manual entry
                        latInput.removeAttribute('readonly');
                        lngInput.removeAttribute('readonly');
                        latInput.placeholder = 'e.g., 40.7128';
                        lngInput.placeholder = 'e.g., -74.0060';
                    },
                    geoOptions  // Apply high accuracy settings
                );
            } else {
                locationStatus.innerHTML = '<i class="bi bi-exclamation-triangle"></i> Geolocation not supported. You can manually enter coordinates.';
                locationStatus.className = 'alert alert-warning';
                
                latInput.removeAttribute('readonly');
                lngInput.removeAttribute('readonly');
                latInput.placeholder = 'e.g., 40.7128';
                lngInput.placeholder = 'e.g., -74.0060';
            }

            // Function to fetch weather data
            async function fetchWeatherData(lat, lng) {
                try {
                    console.log(`DEBUG: Calling weather API for ${lat}, ${lng}`);
                    const response = await fetch(`/FishingSession/GetWeather?lat=${lat}&lng=${lng}`);
                    console.log(`DEBUG: Weather API response status: ${response.status}`);
                    
                    if (response.ok) {
                        const weatherData = await response.json();
                        console.log('DEBUG: Weather API response data:', weatherData);
                        
                        if (weatherData.isSuccessful) {
                            // Store weather data for badge display
                            window.weatherInfo = {
                                conditions: weatherData.weatherConditions || '',
                                temperature: weatherData.temperature || null,
                                windDirection: weatherData.windDirection || '',
                                windSpeed: weatherData.windSpeed || null,
                                pressure: weatherData.barometricPressure || null
                            };
                            
                            locationStatus.innerHTML = '<i class="bi bi-check-circle text-success"></i> Weather loaded! Getting moon phase and tide data...';
                            
                            updateEnvironmentalDisplay();
                        } else {
                            console.log('DEBUG: Weather API returned unsuccessful:', weatherData.errorMessage);
                            weatherSection.style.display = 'block';
                            document.getElementById('weatherConditions').value = 'Weather data unavailable';
                            document.getElementById('temperature').value = 'N/A';
                            
                            locationStatus.innerHTML = '<i class="bi bi-check-circle text-success"></i> Location ready! (Weather data unavailable)';
                        }
                    } else {
                        const errorText = await response.text();
                        console.log('DEBUG: Weather API call failed with status:', response.status, 'Error:', errorText);
                        locationStatus.innerHTML = '<i class="bi bi-check-circle text-success"></i> Location ready! (Weather service unavailable)';
                    }
                } catch (error) {
                    console.error('DEBUG: Error fetching weather:', error);
                    locationStatus.innerHTML = '<i class="bi bi-check-circle text-success"></i> Location ready! (Weather fetch failed)';
                }
            }

            // Function to fetch moon phase data
            async function fetchMoonPhaseData(lat, lng) {
                try {
                    console.log(`DEBUG: Calling moon phase API for ${lat}, ${lng}`);
                    const response = await fetch(`/FishingSession/GetMoonPhase?lat=${lat}&lng=${lng}`);
                    console.log(`DEBUG: Moon phase API response status: ${response.status}`);
                    
                    if (response.ok) {
                        const moonData = await response.json();
                        console.log('DEBUG: Moon phase API response data:', moonData);
                        
                        if (moonData && moonData.phaseName) {
                            // Store moon phase data for badge display
                            window.moonInfo = {
                                phaseName: moonData.phaseName || '',
                                icon: moonData.icon || '🌙',
                                illumination: moonData.illuminationPercentage || 0,
                                fishingQuality: moonData.fishingQuality || 'Good',
                                fishingTip: moonData.fishingTip || 'Good fishing conditions!'
                            };
                            
                            console.log('DEBUG: Moon phase data stored successfully');
                        } else {
                            console.log('DEBUG: Moon phase API returned no data');
                            window.moonInfo = {
                                phaseName: 'Unavailable',
                                icon: '🌙',
                                illumination: 0,
                                fishingQuality: 'N/A',
                                fishingTip: 'Moon phase data unavailable'
                            };
                        }
                        
                        updateEnvironmentalDisplay();
                    } else {
                        const errorText = await response.text();
                        console.log('DEBUG: Moon phase API call failed with status:', response.status, 'Error:', errorText);
                    }
                } catch (error) {
                    console.error('DEBUG: Error fetching moon phase:', error);
                }
            }

            // Function to fetch tide data
            async function fetchTideData(lat, lng) {
                try {
                    console.log(`DEBUG: Starting tide fetch for coordinates:`, lat, lng);
                    
                    const response = await fetch(`/FishingSession/GetTideInfo?lat=${lat}&lng=${lng}`);
                    console.log(`DEBUG: Tide fetch response received, status:`, response.status);
                    
                    if (response.ok) {
                        const tideData = await response.json();
                        console.log('DEBUG: Tide data parsed:', tideData);
                        
                        if (tideData && !tideData.error) {
                            // Store tide data for badge display
                            window.tideInfo = {
                                isCoastal: tideData.isCoastal || false,
                                tideState: tideData.tideState || 'Unknown',
                                tideHeight: tideData.tideHeight || 0,
                                tideRange: tideData.tideRange || '',
                                fishingRecommendation: tideData.fishingRecommendation || 'Good fishing conditions!',
                                timeToNextChange: tideData.timeToNextChange || ''
                            };
                            
                            console.log('DEBUG: Tide data stored successfully');
                        } else {
                            console.log('DEBUG: Tide service returned error:', tideData.errorMessage);
                            window.tideInfo = {
                                isCoastal: false,
                                tideState: 'Unavailable',
                                tideHeight: 0,
                                tideRange: '',
                                fishingRecommendation: 'Tide data unavailable',
                                timeToNextChange: ''
                            };
                        }
                        
                        updateEnvironmentalDisplay();
                    } else {
                        console.log('DEBUG: Tide fetch response not ok:', response.status, response.statusText);
                    }
                } catch (error) {
                    console.error('DEBUG: Tide fetch error:', error);
                }
            }

            // Function to update environmental display with badge-style layout
            function updateEnvironmentalDisplay() {
                // Check if we have all three data sources
                const hasWeather = window.weatherInfo;
                const hasMoon = window.moonInfo;
                const hasTide = window.tideInfo;
                
                if (!hasWeather || !hasMoon || !hasTide) {
                    return; // Wait for all data to be available
                }
                
                // Show the environmental section
                document.getElementById('environmentalSection').style.display = 'block';
                document.getElementById('fishingTipsSection').style.display = 'block';
                
                // Build badges HTML
                let badgesHTML = '';
                
                // Weather badges
                if (window.weatherInfo.conditions) {
                    badgesHTML += `<span class="badge bg-light text-dark">${window.weatherInfo.conditions}</span>`;
                }
                if (window.weatherInfo.temperature) {
                    badgesHTML += `<span class="badge bg-info">${Math.round(window.weatherInfo.temperature)}°F</span>`;
                }
                if (window.weatherInfo.windDirection || window.weatherInfo.windSpeed) {
                    const wind = `Wind: ${window.weatherInfo.windDirection} ${window.weatherInfo.windSpeed ? Math.round(window.weatherInfo.windSpeed) + ' mph' : ''}`.trim();
                    badgesHTML += `<span class="badge bg-secondary">${wind}</span>`;
                }
                if (window.weatherInfo.pressure) {
                    badgesHTML += `<span class="badge bg-warning text-dark">${window.weatherInfo.pressure.toFixed(1)} inHg</span>`;
                }
                
                // Moon phase badge
                const moonText = `${window.moonInfo.phaseName} (${Math.round(window.moonInfo.illumination)}%)`;
                badgesHTML += `<span class="badge bg-dark">${window.moonInfo.icon} ${moonText}</span>`;
                
                // Fishing quality badge
                const qualityColor = window.moonInfo.fishingQuality === 'Excellent' ? 'success' : 
                                   window.moonInfo.fishingQuality === 'Good' ? 'primary' : 'warning';
                badgesHTML += `<span class="badge bg-${qualityColor}">⭐ ${window.moonInfo.fishingQuality}</span>`;
                
                // Tide badge
                if (window.tideInfo.isCoastal) {
                    const tideText = `${window.tideInfo.tideState} (${window.tideInfo.tideHeight.toFixed(1)}ft)`;
                    badgesHTML += `<span class="badge bg-info">🌊 ${tideText}</span>`;
                } else {
                    badgesHTML += `<span class="badge bg-secondary">🌊 Inland Location</span>`;
                }
                
                // Update badges display
                document.getElementById('environmentalBadges').innerHTML = badgesHTML;
                
                // Build combined fishing tips
                let tipsHTML = '';
                if (window.moonInfo.fishingTip) {
                    tipsHTML += `<div><strong>Moon:</strong> ${window.moonInfo.fishingTip}</div>`;
                }
                if (window.tideInfo.fishingRecommendation) {
                    tipsHTML += `<div><strong>Tide:</strong> ${window.tideInfo.fishingRecommendation}</div>`;
                }
                document.getElementById('combinedFishingTips').innerHTML = tipsHTML;
                
                // Update final status
                locationStatus.innerHTML = '<i class="bi bi-check-circle text-success"></i> Location, weather, moon phase, and tide data ready!';
                
                // Hide the status message after 5 seconds
                setTimeout(() => {
                    locationStatus.style.display = 'none';
                }, 5000);
            }
        });

        // Auto-update datetime to current time
        document.addEventListener('DOMContentLoaded', function() {
            const sessionDateInput = document.getElementById('SessionDate');
            if (sessionDateInput && !sessionDateInput.value) {
                const now = new Date();
                now.setMinutes(now.getMinutes() - now.getTimezoneOffset());
                sessionDateInput.value = now.toISOString().slice(0, 16);
            }
        });

        // Debug form submission
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.querySelector('form[asp-action="Create"]');
            const submitBtn = document.getElementById('startSessionBtn');
            
            if (form && submitBtn) {
                submitBtn.addEventListener('click', function(e) {
                    console.log('Start Session button clicked');
                    
                    // Check required fields
                    const sessionDate = document.getElementById('SessionDate');
                    const waterType = document.getElementById('WaterType');
                    
                    if (!sessionDate.value) {
                        console.log('SessionDate is empty:', sessionDate.value);
                    }
                    if (!waterType.value) {
                        console.log('WaterType is empty:', waterType.value);
                    }
                    
                    // Force form submission for debugging
                    console.log('Attempting form submission...');
                });
                
                form.addEventListener('submit', function(e) {
                    console.log('Form submit event fired');
                });
            }
        });
    </script>

    <style>
        .spin {
            animation: spin 1s linear infinite;
        }
        
    </style>
}