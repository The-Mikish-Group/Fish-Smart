@model IEnumerable<Members.Models.ImageViewModel>
@using Members.Models

@{
    ViewData["Title"] = $"Manage Images for: {ViewBag.GalleryName}";
    var currentGalleryName = ViewBag.GalleryName as string; // Get the gallery name once
}

<div class="row justify-content-center m-0 p-0">
    <div class="col-lg-8 col-md-10 p-1">

        <!-- Heading: Manage Images fir 'Gallery' -->
        <h1 class="text-black mb-2 mt-4 text-center">Manage Images for:<br />@ViewBag.GalleryName</h1>

        <!-- Back to Manage Galleries Button -->
        <div class="mb-3 text-center">
            <a asp-controller="Image" asp-action="ManageGalleries" class="btn btn-sm btn-back rounded-2 shadow"><i class="bi bi-box-arrow-left"></i> Back to Manage Galleries</a>
        </div>

        <!-- Status Success Message (Auto-Clear) -->
        @if (TempData["SuccessMessage"] != null)
        {            
            <div class="alert alert-success fade show auto-hide-alertx" role="alert">
                @TempData["SuccessMessage"]
            </div>
        }

        <!-- Status Error Message (Auto-Clear) -->
        @if (TempData["ErrorMessage"] != null)
        {            
            <div class="alert alert-danger fade show auto-hide-alert" role="alert">
                @TempData["ErrorMessage"]
            </div>
        }
       
        <!-- Shadow Card (Upload a New Image) -->
        <div class="card rounded p-1 shadow gallery-upload">
            
            <!-- Heading: Upload a New Image -->
            <h2 class="text-black mb-2 mt-4 ps-2"><i class="bi bi-cloud-arrow-up"></i> Upload a New Image</h2>

            <!-- Upload a New Image Form -->
            <form asp-controller="Image" asp-action="UploadImage" method="post" enctype="multipart/form-data" id="uploadForm">
                <input type="hidden" name="galleryName" value="@currentGalleryName" />

                <!-- Drag and Drop Zone -->
                <div id="dropZone" class="drag-drop-zone mb-3">
                    <div class="drag-drop-content">
                        <i class="bi bi-cloud-arrow-up drag-drop-icon"></i>
                        <h5 class="drag-drop-title">Drag & Drop Images Here</h5>
                        <p class="drag-drop-subtitle">or click to browse files</p>
                        <button type="button" class="btn btn-outline-primary" id="browseButton">
                            <i class="bi bi-folder2-open"></i> Browse Files
                        </button>
                    </div>
                    <div class="drag-drop-overlay" id="dragOverlay">
                        <div class="drag-drop-overlay-content">
                            <i class="bi bi-download text-white"></i>
                            <h4 class="text-white">Drop images to upload</h4>
                        </div>
                    </div>
                </div>

                <!-- Traditional File Input (Hidden) -->
                <input type="file" name="ImageFiles" class="d-none" accept="image/*" multiple id="fileInput">

                <!-- Upload Controls -->
                <div class="d-flex justify-content-between align-items-center">
                    <div class="flex-grow-1">
                        <span id="selectedFilesText" class="text-muted">No files selected</span>
                    </div>
                    <button type="submit" class="btn btn-success" id="uploadButton" disabled>
                        <span id="uploadButtonIcon"><i class="bi bi-cloud-arrow-up"></i></span>
                        <span id="uploadButtonText">Upload</span>
                    </button>
                </div>

                @Html.AntiForgeryToken()
            </form>

            <!-- Upload Progress Section -->
            <div id="uploadProgress" class="mt-3" style="display: none;">
                <div class="d-flex align-items-center">
                    <div class="spinner-border text-primary me-3" role="status" aria-hidden="true"></div>
                    <div class="flex-grow-1">
                        <div class="fw-bold">Processing Images...</div>
                        <div class="text-muted small" id="progressText">Resizing and optimizing images for web viewing</div>
                    </div>
                </div>
                <div class="progress mt-2">
                    <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 100%"></div>
                </div>
            </div>

            <!-- File Info Display -->
            <div id="fileInfo" class="mt-2" style="display: none;">
                <small class="text-muted">
                    <i class="bi bi-info-circle"></i>
                    Selected files will be optimized for viewing on phones and monitors (max 1200px width)
                </small>
            </div>
        </div>

        <!-- AI Batch Rename Section -->
        @if (Model != null && Model.Any())
        {
            <div class="card mt-4 mb-3 rounded p-1 shadow">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="mb-0"><i class="bi bi-robot"></i> AI-Powered Batch Rename</h5>
                            <small class="text-muted">Automatically generate descriptive filenames for all images</small>
                        </div>
                        <div>
                            <a href="@Url.Action("BatchRename", new { galleryName = currentGalleryName })" 
                               class="btn btn-primary btn-sm rounded-2 shadow">
                                <i class="bi bi-magic"></i> Smart Rename
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Shadow Card (Existing Images) -->
        <div class="card mt-4 mb-3 rounded p-1 shadow">

            @if (Model != null && Model.Any())
                {

                <!-- Heading: Existing Images -->
                <h2 class="text-black mb-2 mt-4 ps-2">
                    <i class="bi bi-images"></i> Existing Images
                </h2>

                <!-- Setup Row and loop through Images creating Columns -->
                <div class="row justify-content-center m-0 p-0">
                    @foreach (var image in Model)
                    {
                        <div class="col-md-6 col-lg-3 col-xl-2 mb-2 p-0">

                            <!-- Shadow Card for each Image -->
                            <div class="card h-100 rounded p-2 shadow">

                                <!-- Image Thumbnail with Link to View Image -->
                                <a asp-controller="Image" asp-action="ImageView" asp-route-galleryName="@image.GalleryName" asp-route-fileName="@image.FileName">
                                    <img src="@image.ThumbnailUrl" class="card-img-top img-fluid" alt="@image.FileName" style="width: 100%; height: 100%; object-fit: cover;">
                                </a>

                                <!-- Image Name and Action Buttons -->
                                <div class="card-body rounded-2 p-0 text-center">

                                    <!-- Image Name -->
                                    <p class="card-text mt-1 mb-0">@System.IO.Path.GetFileNameWithoutExtension(image.FileName)</p>
                                    
                                    <!-- Image Actions -->
                                    <div class="btn-group mt-0" role="group" aria-label="Image Actions">
                                        
                                        <!-- Sanitize the FileName -->
                                        @{
                                            var sanitizedImageFileNameForId = image.FileName.Replace(" ", "_").Replace(".", "_");
                                        }

                                        <!-- Rename -->
                                        <button type="button" 
                                            class="btn btn-sm btn-rename me-5 rounded px-2 py-2" 
                                            data-bs-toggle="modal" 
                                            data-bs-target="#renameImageModal_@sanitizedImageFileNameForId"
                                            title="Rename Image">
                                            <i class="bi bi-pencil-square px-0"></i>
                                        </button>                                                
                                            
                                        <!-- Delete Dialog -->
                                        <form asp-controller="Image" asp-action="DeleteImage" method="post" style="display:inline;" id="deleteImageForm_@image.FileName.Replace(".", "_")">
                                            <input type="hidden" name="galleryName" value="@image.GalleryName" />
                                            <input type="hidden" name="fileName" value="@image.FileName" />
                                                
                                            <!-- Delete Button -->
                                            <button type="button" class="btn btn-delete delete-button ms-5 rounded px-2 py-2"
                                                    data-file-name="@image.FileName" data-form-id="deleteImageForm_@image.FileName.Replace(".", "_")"
                                                    onclick="confirmDeleteImage(this)">
                                                <i class="bi bi-trash-fill"></i>
                                            </button>                      

                                        </form>

                                    </div>
                                </div>
                            </div>
                        </div>
                            
                        <!-- Modal Rename Image Form -->
                        <div class="modal fade" id="renameImageModal_@sanitizedImageFileNameForId" tabindex="-1" aria-labelledby="renameImageModalLabel_@sanitizedImageFileNameForId" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">

                                    <!-- Rename Image Form-->
                                    <form asp-controller="Image" asp-action="RenameImage" method="post"> 
                                        
                                        <!-- Modal Body -->
                                        <div class="modal-body">

                                            <!-- Gallery Name and Old file Name -->
                                            <input type="hidden" name="galleryName" value="@image.GalleryName" />
                                            <input type="hidden" name="oldFileName" value="@image.FileName" />

                                            <!-- Modal Header -->
                                            <h5 class="modal-title mb-3">
                                                <i class="bi bi-pencil-square"></i> Rename Image
                                            </h5>

                                            <!-- AI Suggestion Section -->
                                            <div class="mb-3">
                                                <div class="d-flex justify-content-between align-items-center mb-2">
                                                    <label class="form-label fw-bold mb-0">AI Suggestion:</label>
                                                    <button type="button" 
                                                            class="btn btn-sm btn-primary" 
                                                            onclick="getAiSuggestion('@image.GalleryName', '@image.FileName', 'newFileName_@sanitizedImageFileNameForId', 'aiSuggestionText_@sanitizedImageFileNameForId')">
                                                        <i class="bi bi-robot"></i> Generate Smart Name
                                                    </button>
                                                </div>
                                                <div id="aiSuggestionText_@sanitizedImageFileNameForId" class="text-muted small">
                                                    Click "Generate Smart Name" to get an AI-powered filename suggestion
                                                </div>
                                            </div>

                                            <!-- New File Name -->
                                            <div class="mb-2">
                                                <label for="newFileName_@sanitizedImageFileNameForId" class="form-label fw-bold">New File Name:</label>
                                                <input type="text" class="form-control" id="newFileName_@sanitizedImageFileNameForId" name="newFileName" value="@image.FileName" required>
                                            </div>

                                            <!-- Buttons -->
                                            <div class="modal-footer p-0">

                                                <!-- Cancel button -->
                                                <button type="button" class="btn btn-sm btn-secondary rounded-2 me-2 shadow" data-bs-dismiss="modal" aria-label="Cancel">
                                                    <i class="bi bi-box-arrow-left"></i> Cancel
                                                </button>

                                                <!-- Save Changes Button -->
                                                <button type="submit" class="btn btn-sm btn-success rounded-2 shadow">
                                                    <i class="bi bi-pencil-square px-0"></i> Save Changes
                                                </button>

                                            </div>

                                        </div>

                                    </form>
                                </div>
                            </div>
                        </div>
                            
                    }
                </div>                    
                }
                else
                {   
                    <!-- No Images Message -->
                    <div class="text-black py-4 text-center">This gallery is empty. Upload images above!</div>
                }    
            
        </div>
    </div>
</div>

@section Styles {
    <style>
        /* Styles to remove borders */
        .card-body .list-group-item {
            border-bottom: none !important;
        }
        .card-body .list-group-item:first-child {
            border-top: none !important;
        }
        .card-body .list-group-item:last-child {
            border-bottom: none !important;
        }
        /* Add CSS to control the link color on hover/focus */
        .text-decoration-none:hover, .text-decoration-none:focus {
            text-decoration: none;
            font-weight: 600;
        }
        .card-img-top {
            cursor: pointer;
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        }
        .card-img-top:hover {
            transform: scale(1.02);
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
        }
        /* Remove the top border of the modal footer to get rid of the line above the buttons */
        .modal-footer {
            border-top: none;
        }
               
    </style>
}

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        // Function to confirm image deletion
        function confirmDeleteImage(button) {
            const fileName = button.getAttribute('data-file-name');
            const formId = button.getAttribute('data-form-id');
            showConfirmModal(
                'Are you sure you want to delete <strong>' + fileName + '</strong>?<br/><br/>This action cannot be undone.',
                function() {
                    document.getElementById(formId).submit();
                },
                { title: 'Delete Image', confirmText: 'Delete' }
            );
        }

        document.addEventListener('DOMContentLoaded', function () {
            // Auto-hide alerts
            var alertsToAutoHide = document.querySelectorAll('.auto-hide-alert');
            alertsToAutoHide.forEach(function(alertElement) {
                setTimeout(function() {
                    alertElement.classList.remove('show');
                    alertElement.addEventListener('transitionend', function() {
                        alertElement.remove();
                    }, { once: true });
                }, 2500);
            });

            // Elements
            const fileInput = document.getElementById('fileInput');
            const fileInfo = document.getElementById('fileInfo');
            const uploadForm = document.getElementById('uploadForm');
            const uploadButton = document.getElementById('uploadButton');
            const uploadButtonIcon = document.getElementById('uploadButtonIcon');
            const uploadButtonText = document.getElementById('uploadButtonText');
            const uploadProgress = document.getElementById('uploadProgress');
            const progressText = document.getElementById('progressText');
            const dropZone = document.getElementById('dropZone');
            const dragOverlay = document.getElementById('dragOverlay');
            const browseButton = document.getElementById('browseButton');
            const selectedFilesText = document.getElementById('selectedFilesText');

            // Drag and Drop Event Handlers
            function setupDragAndDrop() {
                // Prevent default drag behaviors on the entire page
                ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                    document.addEventListener(eventName, preventDefaults, false);
                    document.body.addEventListener(eventName, preventDefaults, false);
                });

                // Highlight drop zone when item is dragged over it
                ['dragenter', 'dragover'].forEach(eventName => {
                    dropZone.addEventListener(eventName, highlight, false);
                });

                ['dragleave', 'drop'].forEach(eventName => {
                    dropZone.addEventListener(eventName, unhighlight, false);
                });

                // Handle dropped files
                dropZone.addEventListener('drop', handleDrop, false);
                
                // Click to browse
                dropZone.addEventListener('click', () => fileInput.click());
                browseButton.addEventListener('click', (e) => {
                    e.stopPropagation();
                    fileInput.click();
                });
            }

            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }

            function highlight(e) {
                dropZone.classList.add('drag-over');
                dragOverlay.classList.add('show');
            }

            function unhighlight(e) {
                dropZone.classList.remove('drag-over');
                dragOverlay.classList.remove('show');
            }

            function handleDrop(e) {
                const dt = e.dataTransfer;
                const files = dt.files;
                
                // Convert FileList to Array and filter for images
                const imageFiles = Array.from(files).filter(file => {
                    return file.type.startsWith('image/');
                });

                if (imageFiles.length > 0) {
                    // Create a new FileList with only image files
                    const dataTransfer = new DataTransfer();
                    imageFiles.forEach(file => dataTransfer.items.add(file));
                    fileInput.files = dataTransfer.files;
                    
                    // Trigger change event
                    fileInput.dispatchEvent(new Event('change', { bubbles: true }));
                } else {
                    alert('Please drop only image files (JPG, PNG, GIF, etc.)');
                }
            }

            // File selection handling (both drag-drop and browse)
            function handleFileSelection() {
                const files = fileInput.files;
                updateFileDisplay(files);
                updateUploadButton(files.length > 0);
                updateFileInfo(files);
            }

            function updateFileDisplay(files) {
                if (files.length > 0) {
                    const fileCount = files.length;
                    const totalSize = Array.from(files).reduce((total, file) => total + file.size, 0);
                    const sizeMB = (totalSize / (1024 * 1024)).toFixed(1);
                    
                    selectedFilesText.textContent = `${fileCount} image(s) selected (${sizeMB} MB)`;
                    selectedFilesText.classList.add('has-files');
                } else {
                    selectedFilesText.textContent = 'No files selected';
                    selectedFilesText.classList.remove('has-files');
                }
            }

            function updateUploadButton(hasFiles) {
                uploadButton.disabled = !hasFiles;
            }

            function updateFileInfo(files) {
                if (files.length > 0) {
                    fileInfo.style.display = 'block';
                    
                    const fileCount = files.length;
                    const totalSize = Array.from(files).reduce((total, file) => total + file.size, 0);
                    const sizeMB = (totalSize / (1024 * 1024)).toFixed(1);
                    
                    fileInfo.innerHTML = `
                        <small class="text-muted">
                            <i class="bi bi-info-circle"></i>
                            ${fileCount} file(s) selected (${sizeMB} MB total) - 
                            Images will be optimized for viewing (max 1200px width, 85% quality)
                        </small>
                    `;
                } else {
                    fileInfo.style.display = 'none';
                }
            }

            // Initialize drag and drop
            setupDragAndDrop();

            // File input change handler
            fileInput.addEventListener('change', handleFileSelection);

            // Form submission handler
            uploadForm.addEventListener('submit', function(e) {
                const files = fileInput.files;
                if (files.length === 0) {
                    e.preventDefault();
                    return;
                }

                // Show loading state
                uploadProgress.style.display = 'block';
                uploadButton.disabled = true;
                uploadButtonIcon.innerHTML = '<div class="spinner-border spinner-border-sm" role="status"></div>';
                uploadButtonText.textContent = 'Processing...';

                // Update progress text based on file count
                const fileCount = files.length;
                if (fileCount === 1) {
                    progressText.textContent = 'Resizing and optimizing 1 image for web viewing...';
                } else {
                    progressText.textContent = `Resizing and optimizing ${fileCount} images for web viewing...`;
                }

                // Estimate processing time
                const estimatedSeconds = Math.max(3, fileCount * 2);
                setTimeout(function() {
                    if (uploadProgress.style.display !== 'none') {
                        progressText.textContent = `Still processing... Large images take longer to optimize.`;
                    }
                }, estimatedSeconds * 1000);
            });
        });

        // AI Suggestion function for use within rename modal
        function getAiSuggestion(galleryName, fileName, inputFieldId, suggestionTextId) {
            console.log(`AI Suggestion called for: ${galleryName}/${fileName}`);
            
            // Show loading state
            const button = event.target;
            const originalContent = button.innerHTML;
            const suggestionDiv = document.getElementById(suggestionTextId);
            const inputField = document.getElementById(inputFieldId);
            
            button.innerHTML = '<span class="spinner-border spinner-border-sm me-1"></span>Analyzing...';
            button.disabled = true;
            suggestionDiv.innerHTML = '<span class="text-info">🤖 AI is analyzing the image...</span>';
            
            // Call the debug endpoint to get AI suggestion
            const debugUrl = `/Image/DebugAnalysis?galleryName=${encodeURIComponent(galleryName)}&fileName=${encodeURIComponent(fileName)}`;
            console.log(`Debug URL: ${debugUrl}`);
            
            fetch(debugUrl)
                .then(response => {
                    console.log(`Response status: ${response.status}`);
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    return response.text();
                })
                .then(text => {
                    console.log(`Raw response: ${text}`);
                    try {
                        const data = JSON.parse(text);
                        
                        // Restore button
                        button.innerHTML = originalContent;
                        button.disabled = false;
                        
                        if (data.success) {
                            const result = data.result;
                            
                            // Update the suggestion display
                            suggestionDiv.innerHTML = `
                                <div class="alert alert-success p-2 mb-2">
                                    <strong>✨ ${result.suggested}</strong><br>
                                    <small class="text-muted">
                                        ${result.description} • Confidence: ${Math.round(result.confidence * 100)}%
                                    </small>
                                </div>
                                <button type="button" class="btn btn-sm btn-outline-success" onclick="useSuggestion('${inputFieldId}', '${result.suggested}')">
                                    <i class="bi bi-check-circle"></i> Use This Name
                                </button>
                            `;
                        } else {
                            suggestionDiv.innerHTML = `
                                <div class="alert alert-danger p-2">
                                    <small>❌ AI Analysis failed: ${data.error || 'Unknown error'}</small>
                                </div>
                            `;
                            console.error('AI Analysis Error:', data);
                        }
                    } catch (parseError) {
                        console.error('JSON Parse Error:', parseError);
                        console.error('Response text was:', text);
                        
                        suggestionDiv.innerHTML = `
                            <div class="alert alert-danger p-2">
                                <small>❌ Failed to parse AI response. Check console for details.</small>
                            </div>
                        `;
                        
                        // Restore button
                        button.innerHTML = originalContent;
                        button.disabled = false;
                    }
                })
                .catch(error => {
                    // Restore button
                    button.innerHTML = originalContent;
                    button.disabled = false;
                    
                    suggestionDiv.innerHTML = `
                        <div class="alert alert-danger p-2">
                            <small>❌ AI request failed: ${error.message}</small>
                        </div>
                    `;
                    
                    console.error('AI Suggestion request failed:', error);
                });
        }
        
        // Helper function to use the AI suggestion
        function useSuggestion(inputFieldId, suggestedName) {
            const inputField = document.getElementById(inputFieldId);
            if (inputField) {
                inputField.value = suggestedName;
                inputField.focus();
                inputField.select();
            }
        }
        
        // Helper function to execute rename
        function executeRename(galleryName, oldFileName, newFileName) {
            // Create a temporary form to submit the rename
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '/Image/RenameImage';
            
            // Add anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            const tokenInput = document.createElement('input');
            tokenInput.type = 'hidden';
            tokenInput.name = '__RequestVerificationToken';
            tokenInput.value = token;
            form.appendChild(tokenInput);
            
            // Add form fields
            const fields = [
                { name: 'GalleryName', value: galleryName },
                { name: 'OldFileName', value: oldFileName },
                { name: 'NewFileName', value: newFileName }
            ];
            
            fields.forEach(field => {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = field.name;
                input.value = field.value;
                form.appendChild(input);
            });
            
            // Submit form
            document.body.appendChild(form);
            form.submit();
        }
    </script>
}